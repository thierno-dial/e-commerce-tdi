#!/usr/bin/env node

/**
 * üöÄ Script de D√©ploiement Production - SoleHub
 * 
 * Ce script automatise le d√©ploiement complet de l'application :
 * 1. Nettoyage de la base de donn√©es
 * 2. Insertion des donn√©es de production depuis les fichiers CSV
 * 3. V√©rification de l'int√©grit√© des donn√©es
 * 
 * Usage: node scripts/deploy-production.js
 */

const { sequelize } = require('../database');

async function deployProduction() {
  console.log('üöÄ D√âPLOIEMENT PRODUCTION - SOLEHUB');
  console.log('=====================================\n');

  try {
    // V√©rification de la connexion √† la base de donn√©es
    console.log('üîå V√©rification de la connexion √† la base de donn√©es...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie\n');

    // Synchronisation des mod√®les (cr√©ation des tables si n√©cessaire)
    console.log('üìã Synchronisation des mod√®les de base de donn√©es...');
    await sequelize.sync({ force: false }); // force: false pour ne pas recr√©er les tables
    console.log('‚úÖ Mod√®les synchronis√©s\n');

    // Ex√©cution du seeding de production
    console.log('üì¶ Lancement du seeding de production...');
    const { spawn } = require('child_process');
    
    await new Promise((resolve, reject) => {
      const seedProcess = spawn('node', ['scripts/seed-production.js'], {
        cwd: process.cwd(),
        stdio: 'inherit'
      });
      
      seedProcess.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`Seeding process exited with code ${code}`));
        }
      });
      
      seedProcess.on('error', reject);
    });
    
    console.log('‚úÖ Seeding de production termin√©\n');

    // V√©rification finale
    console.log('üîç V√©rification finale des donn√©es...');
    const { Product, User, ProductVariant } = require('../database');
    
    const productCount = await Product.count({ where: { isActive: true } });
    const userCount = await User.count({ where: { isActive: true } });
    const variantCount = await ProductVariant.count();
    
    console.log('üìä R√âSUM√â DU D√âPLOIEMENT:');
    console.log(`   üëü Produits actifs: ${productCount}`);
    console.log(`   üë• Utilisateurs actifs: ${userCount}`);
    console.log(`   üìè Variantes de produits: ${variantCount}`);
    
    if (productCount === 0 || userCount === 0) {
      throw new Error('‚ùå Donn√©es incompl√®tes d√©tect√©es');
    }
    
    console.log('\nüéâ D√âPLOIEMENT PRODUCTION R√âUSSI !');
    console.log('üåê Votre marketplace SoleHub est pr√™te pour la production');
    
  } catch (error) {
    console.error('\n‚ùå ERREUR DE D√âPLOIEMENT:', error.message);
    console.error('üìã D√©tails:', error);
    process.exit(1);
  } finally {
    // Fermeture propre de la connexion
    await sequelize.close();
    console.log('\nüîå Connexion √† la base de donn√©es ferm√©e');
  }
}

// Ex√©cution du script si appel√© directement
if (require.main === module) {
  deployProduction()
    .then(() => {
      console.log('\n‚úÖ Script de d√©ploiement termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Script de d√©ploiement √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = deployProduction;
